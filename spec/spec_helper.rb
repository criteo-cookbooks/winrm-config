# This file was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# Require this file using `require "spec_helper"` to ensure that it is only
# loaded once.
#
require 'chefspec'
require 'chefspec/berkshelf'

# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
RSpec.configure do |config|
  config.run_all_when_everything_filtered = true
  config.filter_run :focus
  config.order = 'random'
end

def mock_shellout(cmd, stdout = '')
  dbl = double("shellout_#{cmd}", run_command: nil, error!: false, stdout: stdout)

  expect(::Mixlib::ShellOut).to receive(:new).with(cmd, anything).and_return dbl
end

def mock_winrm_get(is_new, uri, subject, issuer, username, enabled = true)
  output = is_new ? '' : <<-EOS
  CertMapping
    URI = #{uri}
    Subject = #{subject}
    Issuer = #{issuer}
    UserName = #{username}
    Enabled = #{enabled}
    Password
  EOS
  path = "winrm/config/service/certmapping?Issuer=#{issuer}+Subject=#{subject}+URI=#{uri}"
  mock_shellout("winrm.cmd get #{path}", output)
end

def mock_winrm_set(is_new, uri, subject, issuer, username, password, enabled = true)
  path = "winrm/config/service/certmapping?Issuer=#{issuer}+Subject=#{subject}+URI=#{uri}"
  args = "Enabled=\"#{enabled}\";UserName=\"#{username}\";Password=\"#{password}\""

  mock_shellout("winrm.cmd #{is_new ? :create : :set} #{path} @{#{args}}")
end

def mock_winrm_delete(uri, subject, issuer)
  path = "winrm/config/service/certmapping?Issuer=#{issuer}+Subject=#{subject}+URI=#{uri}"

  mock_shellout("winrm.cmd delete #{path}")
end
